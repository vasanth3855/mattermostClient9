{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/widgets/icons/fa_next_icon.tsx","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/create_team/components/display_name.jsx","webpack:///./components/create_team/components/team_url/team_url.jsx","webpack:///./components/create_team/components/team_url/index.js","webpack:///./components/create_team/create_team.jsx","webpack:///./components/create_team/index.ts"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","NextIcon","additionalClassName","t","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","style","marginLeft","color","fontWeight","width","TeamSignupDisplayNamePage","constructor","super","e","preventDefault","trackEvent","displayName","ReactDOM","findDOMNode","refs","name","value","trim","setState","nameError","length","Constants","MIN_TEAMNAME_LENGTH","MAX_TEAMNAME_LENGTH","values","min","max","newState","state","wizard","team","display_name","cleanUpUrlable","updateParent","currentTarget","select","componentDidMount","nameDivClass","alt","src","logoImage","type","ref","placeholder","maxLength","defaultValue","autoFocus","onFocus","handleFocus","spellCheck","submitNext","PropTypes","object","func","TeamUrl","async","cleanedName","URL","actions","checkIfTeamExists","createTeam","test","index","RESERVED_TEAM_NAMES","indexOf","isLoading","teamSignup","JSON","parse","stringify","exists","data","error","history","push","DEFAULT_CHANNEL","message","urlTooltip","Tooltip","finishMessage","delayShow","OVERLAY_TIME_DELAY","placement","overlay","Button","bsStyle","disabled","href","submitBack","shape","isRequired","connect","dispatch","bindActionCreators","CreateTeam","currentChannel","currentTeam","match","path","string","config","getConfig","getCurrentChannel","getCurrentTeam","CustomDescriptionText","SiteName"],"mappings":"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","file":"13.d73983ad4b8140d7ffb1.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/87b80d01a017833f1357800bfca49cea.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class NextIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-1x fa-angle-right' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.next'), defaultMessage: 'Next Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost'\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name' style={{marginLeft: '104%'}}>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                    style={{color: '#223162', fontWeight: 400, width: 'max-content'}}\n\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {cleanUpUrlable} from 'utils/url';\nimport logoImage from 'images/logo.png';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\n\nexport default class TeamSignupDisplayNamePage extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Object containing team's display_name and name\n         */\n        state: PropTypes.object,\n\n        /*\n         * Function that updates parent component with state props\n         */\n        updateParent: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_team_01_name');\n    }\n\n    submitNext = (e) => {\n        e.preventDefault();\n        trackEvent('display_name', 'click_next');\n        var displayName = ReactDOM.findDOMNode(this.refs.name).value.trim();\n        if (!displayName) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        } else if (displayName.length < Constants.MIN_TEAMNAME_LENGTH || displayName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description later.'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        const newState = this.props.state;\n        newState.wizard = 'team_url';\n        newState.team.display_name = displayName;\n        newState.team.name = cleanUpUrlable(displayName);\n        this.props.updateParent(newState);\n    }\n\n    handleFocus = (e) => {\n        e.preventDefault();\n        e.currentTarget.select();\n    }\n\n    render() {\n        var nameError = null;\n        var nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id='create_team.display_name.teamName'\n                            defaultMessage='Team Name'\n                        />\n                    </h2>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-9'>\n                                <input\n                                    id='teamNameInput'\n                                    type='text'\n                                    ref='name'\n                                    className='form-control'\n                                    placeholder=''\n                                    maxLength='128'\n                                    defaultValue={this.props.state.team.display_name}\n                                    autoFocus={true}\n                                    onFocus={this.handleFocus}\n                                    spellCheck='false'\n                                />\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <div>\n                        <FormattedMessage\n                            id='create_team.display_name.nameHelp'\n                            defaultMessage='Name your team in any language. Your team name shows in menus and headings.'\n                        />\n                    </div>\n                    <button\n                        id='teamNameNextButton'\n                        type='submit'\n                        className='btn btn-primary mt-8'\n                        onClick={this.submitNext}\n                    >\n                        <FormattedMessage\n                            id='create_team.display_name.next'\n                            defaultMessage='Next'\n                        />\n                        <NextIcon/>\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Button, Tooltip} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as URL from 'utils/url';\nimport logoImage from 'images/logo.png';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nexport default class TeamUrl extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Object containing team's display_name and name\n         */\n        state: PropTypes.object,\n\n        /*\n         * Function that updates parent component with state props\n         */\n        updateParent: PropTypes.func,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to check if a team already exists\n             */\n            checkIfTeamExists: PropTypes.func.isRequired,\n\n            /*\n             * Action creator to create a new team\n             */\n            createTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nameError: '',\n            isLoading: false,\n        };\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_team_02_url');\n    }\n\n    submitBack = (e) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_back');\n        const newState = this.props.state;\n        newState.wizard = 'display_name';\n        this.props.updateParent(newState);\n    }\n\n    submitNext = async (e) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_finish');\n\n        const name = ReactDOM.findDOMNode(this.refs.name).value.trim();\n        const cleanedName = URL.cleanUpUrlable(name);\n        const urlRegex = /^[a-z]+([a-z\\-0-9]+|(__)?)[a-z0-9]+$/g;\n        const {actions: {checkIfTeamExists, createTeam}} = this.props;\n\n        if (!name) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName.length < Constants.MIN_TEAMNAME_LENGTH || cleanedName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName !== name || !urlRegex.test(name)) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.regex'\n                    defaultMessage=\"Use only lower case letters, numbers and dashes. Must start with a letter and can't end in a dash.\"\n                />),\n            });\n            return;\n        }\n\n        for (let index = 0; index < Constants.RESERVED_TEAM_NAMES.length; index++) {\n            if (cleanedName.indexOf(Constants.RESERVED_TEAM_NAMES[index]) === 0) {\n                this.setState({nameError: (\n                    <FormattedMarkdownMessage\n                        id='create_team.team_url.taken'\n                        defaultMessage='This URL [starts with a reserved word](!https://docs.mattermost.com/help/getting-started/creating-teams.html#team-url) or is unavailable. Please try another.'\n                    />),\n                });\n                return;\n            }\n        }\n\n        this.setState({isLoading: true});\n        var teamSignup = JSON.parse(JSON.stringify(this.props.state));\n        teamSignup.team.type = 'O';\n        teamSignup.team.name = name;\n\n        const {exists} = await checkIfTeamExists(name);\n\n        if (exists) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.unavailable'\n                    defaultMessage='This URL is taken or unavailable. Please try another.'\n                />),\n            });\n            this.setState({isLoading: false});\n            return;\n        }\n\n        const {data, error} = await createTeam(teamSignup.team);\n\n        if (data) {\n            this.props.history.push('/' + data.name + '/channels/' + Constants.DEFAULT_CHANNEL);\n            trackEvent('signup', 'signup_team_03_complete');\n        } else if (error) {\n            this.setState({nameError: error.message});\n            this.setState({isLoading: false});\n        }\n    }\n\n    handleFocus = (e) => {\n        e.preventDefault();\n        e.currentTarget.select();\n    }\n\n    render() {\n        let nameError = null;\n        let nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        const title = `${URL.getSiteURL()}/`;\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{title}</Tooltip>\n        );\n\n        let finishMessage = (\n            <FormattedMessage\n                id='create_team.team_url.finish'\n                defaultMessage='Finish'\n            />\n        );\n\n        if (this.state.isLoading) {\n            finishMessage = (\n                <FormattedMessage\n                    id='create_team.team_url.creatingTeam'\n                    defaultMessage='Creating team...'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup team logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id='create_team.team_url.teamUrl'\n                            defaultMessage='Team URL'\n                        />\n                    </h2>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-11'>\n                                <div className='input-group input-group--limit'>\n                                    <OverlayTrigger\n                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                        placement='top'\n                                        overlay={urlTooltip}\n                                    >\n                                        <span className='input-group-addon'>\n                                            {title}\n                                        </span>\n                                    </OverlayTrigger>\n                                    <input\n                                        id='teamURLInput'\n                                        type='text'\n                                        ref='name'\n                                        className='form-control'\n                                        placeholder=''\n                                        maxLength='128'\n                                        defaultValue={this.props.state.team.name}\n                                        autoFocus={true}\n                                        onFocus={this.handleFocus}\n                                        spellCheck='false'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <p>\n                        <FormattedMessage\n                            id='create_team.team_url.webAddress'\n                            defaultMessage='Choose the web address of your new team:'\n                        />\n                    </p>\n                    <ul className='color--light'>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint1'\n                                defaultMessage='Short and memorable is best'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint2'\n                                defaultMessage='Use lowercase letters, numbers and dashes'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint3'\n                                defaultMessage=\"Must start with a letter and can't end in a dash\"\n                            />\n                        </li>\n                    </ul>\n                    <div className='mt-8'>\n                        <Button\n                            id='teamURLFinishButton'\n                            type='submit'\n                            bsStyle='primary'\n                            disabled={this.state.isLoading}\n                            onClick={this.submitNext}\n                        >\n                            {finishMessage}\n                        </Button>\n                    </div>\n                    <div className='mt-8'>\n                        <a\n                            href='#'\n                            onClick={this.submitBack}\n                        >\n                            <FormattedMessage\n                                id='create_team.team_url.back'\n                                defaultMessage='Back to previous step'\n                            />\n                        </a>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {checkIfTeamExists, createTeam} from 'mattermost-redux/actions/teams';\n\nimport TeamUrl from './team_url';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            checkIfTeamExists,\n            createTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(TeamUrl);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport DisplayName from 'components/create_team/components/display_name';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport TeamUrl from 'components/create_team/components/team_url';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nexport default class CreateTeam extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Object containing information on the current team, used to define BackButton's url\n         */\n        currentTeam: PropTypes.object,\n\n        /*\n         * Object containing information on the current selected channel, used to define BackButton's url\n         */\n        currentChannel: PropTypes.object,\n\n        /*\n         * String containing the custom branding's text\n         */\n        customDescriptionText: PropTypes.string,\n\n        /*\n         * String containing the custom branding's Site Name\n         */\n        siteName: PropTypes.string,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const state = {};\n        state.team = {};\n        state.wizard = 'display_name';\n        this.state = state;\n    }\n\n    updateParent = (state) => {\n        this.setState(state);\n        this.props.history.push('/create_team/' + state.wizard);\n    }\n\n    render() {\n        const {\n            currentChannel,\n            currentTeam,\n            customDescriptionText,\n            match,\n            siteName,\n        } = this.props;\n\n        let url = '/select_team';\n        if (currentTeam) {\n            url = `/${currentTeam.name}`;\n            if (currentChannel) {\n                url += `/channels/${currentChannel.name}`;\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton\n                    onClick={() => trackEvent('display_name', 'click_back')}\n                    url={url}\n                />\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <div className='signup__content'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/display_name`}\n                                    render={(props) => (\n                                        <DisplayName\n                                            state={this.state}\n                                            updateParent={this.updateParent}\n                                            {...props}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/team_url`}\n                                    render={(props) => (\n                                        <TeamUrl\n                                            state={this.state}\n                                            updateParent={this.updateParent}\n                                            {...props}\n                                        />\n                                    )}\n                                />\n                                <Redirect to={`${match.url}/display_name`}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport CreateTeam from './create_team';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeam = getCurrentTeam(state);\n\n    const customDescriptionText = config.CustomDescriptionText!;\n    const siteName = config.SiteName!;\n\n    return {\n        currentChannel,\n        currentTeam,\n        customDescriptionText,\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(CreateTeam);\n"],"sourceRoot":""}