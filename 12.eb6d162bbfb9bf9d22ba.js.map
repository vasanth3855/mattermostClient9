{"version":3,"sources":["webpack:///./node_modules/mattermost-redux/actions/timezone.js","webpack:///./actions/views/mfa.js","webpack:///./node_modules/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js","webpack:///./node_modules/mattermost-redux/utils/notify_props.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.tsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/components/more_info.tsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.tsx","webpack:///./components/user_settings/security/mfa_section/index.ts","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.tsx","webpack:///./components/user_settings/index.ts"],"names":["Object","defineProperty","exports","value","tslib_1","users_1","timezone_1","users_2","autoUpdateTimezone","deviceTimezone","_this","this","dispatch","getState","__awaiter","currentUer","currentTimezone","newTimezoneExists","timezone","updatedUser","__generator","_a","getCurrentUser","getUserTimezone","id","automaticTimezone","useAutomaticTimezone","manualTimezone","__assign","updateMe","activateMfa","code","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","jq","$","Color","val","predefinedColors","fallbackColor","fallbackFormat","hexNumberSignPrefix","fallbackValue","h","s","b","a","origFormat","colors","extend","webColors","setColor","String","prototype","constructor","getValue","setValue","_sanitizeNumber","isNaN","undefined","toLowerCase","match","Math","ceil","parseFloat","isTransparent","strVal","trim","rgbaIsTransparent","rgba","r","g","parsedColor","parse","format","setHue","setSaturation","setBrightness","setAlpha","round","parseInt","toRGB","R","G","B","X","C","arguments","length","abs","toHex","ignoreFormat","prefix","rgb","hexStr","toString","slice","toHSL","H","L","S","l","toAlias","c","original","alias","RGBtoHSB","V","max","min","HueToRGB","p","q","HSLtoRGB","tr","tg","tb","values","that","result","isAlias","each","stringParsers","i","parser","re","exec","apply","getValidFallbackFormat","formats","indexOf","forceRawValue","translateAlias","execResult","colorNameToHex","name","defaults","horizontal","inline","color","input","container","component","sliders","saturation","maxLeft","maxTop","callLeft","callTop","hue","alpha","slidersHorz","template","align","customClass","colorSelectors","Colorpicker","element","options","addClass","data","find","is","createColor","updateInput","updateData","disabled","$picker","picker","colorpicker","selectorsContainer","$btn","css","on","event","preventDefault","append","show","proxy","e","target","currentTarget","mousedown","appendTo","keyup","change","hide","attr","update","trigger","destroy","remove","removeData","off","removeClass","type","reposition","window","document","body","offset","left","outerWidth","top","outerHeight","isDisabled","hasInput","stopPropagation","parents","prop","updatePicker","sl","icns","eq","end","updateComponent","icn","force","defaultValue","disable","enable","currentSlider","mousePointer","pageX","pageY","originalEvent","touches","zone","closest","guide","style","mousemove","mouseup","call","keyCode","fn","option","apiArgs","Array","isSingleElement","returnValue","$jq","$this","inst","isFunction","constants_1","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","Preferences","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithoutEmailBatching","JoinLeaveSection","React","PureComponent","props","super","setState","joinLeaveState","section","joinLeave","onUpdateSection","actions","joinLeavePreference","category","CATEGORY_ADVANCED_SETTINGS","user_id","ADVANCED_FILTER_JOIN_LEAVE","state","savePreferences","render","activeSection","AdvancedSections","JOIN_LEAVE","title","defaultMessage","inputs","key","className","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","describe","renderOnOffLabel","PropTypes","string","isRequired","func","shape","connect","getPreference","bindActionCreators","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","forEach","lastIndexOf","features","push","async","preferences","currentUser","userId","isArray","updateUserActive","then","error","message","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","description","default","t","mac","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","toggleFeature","saveEnabledFeatures","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","object","array","bool","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","hexRegex","ColorInput","colorPicker","current","contains","isOpened","colorInput","focus","newColorData","hex","handleChange","split","map","ch","index","join","startsWith","test","ensureLongColourValue","toUpperCase","setHex","togglePicker","setSelectionRange","createRef","componentWillMount","componentDidUpdate","prevProps","prevState","prevIsOpened","addEventListener","checkClick","removeEventListener","onBlur","onKeyDown","onFocus","selectValue","backgroundColor","handleColorChange","disableAlpha","ColorChooser","Component","newColor","node","messages","defineMessages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","text","clipboardData","getData","JSON","err","setThemeDefaults","stringify","textarea","refs","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","setTimeout","componentDidMount","onCodeThemeChange","componentWillUnmount","assign","image","UserAgent","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","popoverStyle","width","alt","src","placement","overlay","group","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","role","display","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","activeClass","replace","propTypes","arrayOf","defaultProps","AllowedThemes","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","selected","ReactDOM","findDOMNode","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","updateType","displayCustom","custom","premade","themeUI","allowCustomThemes","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","focused","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","filteredTimezones","filter","getTimezoneRegion","ManageTimezones","manualTimezoneInput","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","user","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","providers","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","ENTER","add","selectedOption","locale","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","order","sort","lang","reactStyles","menuPortal","provided","zIndex","classNamePrefix","menuIsOpen","menuPortalTarget","styles","clearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","aria-labelledby","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","firstDisplay","secondDisplay","thirdDisplay","thirdSection","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","defaultClientLocale","enableThemeSelection","getTimezones","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","holders","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","UserSettingsGeneralTab","email","resendStatus","showSpinner","sendVerificationEmail","loading","handleEmailResend","formatMessage","intl","usernameError","clientError","MIN_USERNAME_LENGTH","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","getMe","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","autoFocus","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifLink","updateTab","notify","submitName","nicknameSection","usernameSection","positionSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","onSubmit","submitPicture","onSetDefault","last_picture_update","setDefaultProfilePicture","defaultImageSrc","onFileChange","updatePicture","minMessage","date","Date","day","month","year","intlShape","number","injectIntl","RequireEmailVerification","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","soundSection","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","EmailNotificationSetting","enableEmail","newInterval","emailInterval","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","sendEmailNotifications","localizeMessage","batchingOptions","batchingInfo","data-enable-email","data-email-interval","nextProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","handleCancel","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","substring","commentsActive","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","getUserAudits","onShow","content","userAudits","audits","showIp","showSession","Modal","dialogClassName","onHide","onExited","bsSize","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","create_at","getMonthLong","time","hour","minute","os","browser","platform","last_activity_at","ActivityLog","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","altId","modalContent","revokeSession","getSessions","sessions","activityList","reduce","oneOfType","getUserSessions","getCurrentLocale","MfaSection","browserHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmButton","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","onKeyPress","saveTokenKeyPress","btnClass","savingMessage","stopCreatingToken","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ariaLabel","dialogType","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","closeUnusedDirectMessages","channelSwitcherOption","channelSidebarOrganizationOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","close_unused_direct_messages","channel_switcher_section","channel_sidebar_organization","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","sectionName","showChannelOrganization","contents","renderAutoCloseDMLabel","Fragment","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","helpChannelSidebarOrganizationText","renderChannelSwitcherLabel","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","showUnusedOption","showChannelSidebarOrganization","channelSidebarOrganizationDisabled","channelOrganizationSection","renderChannelOrganizationSection","channelSidebarOrganizationSection","renderChannelSidebarOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getNewSidebarPreference","getSidebarPreferences","ExperimentalChannelOrganization","ExperimentalChannelSidebarOrganization","CloseUnusedDirectMessages","UserSettings"],"mappings":"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","file":"12.eb6d162bbfb9bf9d22ba.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar users_1 = require(\"../selectors/entities/users\");\nvar timezone_1 = require(\"../selectors/entities/timezone\");\nvar users_2 = require(\"./users\");\nfunction autoUpdateTimezone(deviceTimezone) {\n    var _this = this;\n    return function (dispatch, getState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var currentUer, currentTimezone, newTimezoneExists, timezone, updatedUser;\n        return tslib_1.__generator(this, function (_a) {\n            currentUer = users_1.getCurrentUser(getState());\n            currentTimezone = timezone_1.getUserTimezone(getState(), currentUer.id);\n            newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n            if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n                timezone = {\n                    useAutomaticTimezone: 'true',\n                    automaticTimezone: deviceTimezone,\n                    manualTimezone: currentTimezone.manualTimezone,\n                };\n                updatedUser = tslib_1.__assign(tslib_1.__assign({}, currentUer), { timezone: timezone });\n                users_2.updateMe(updatedUser)(dispatch, getState);\n            }\n            return [2 /*return*/];\n        });\n    }); };\n}\nexports.autoUpdateTimezone = autoUpdateTimezone;\n//# sourceMappingURL=timezone.js.map","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","/*!\n * Bootstrap Colorpicker v2.5.2\n * https://itsjavi.com/bootstrap-colorpicker/\n *\n * Originally written by (c) 2012 Stefan Petre\n * Licensed under the Apache License v2.0\n * http://www.apache.org/licenses/LICENSE-2.0.txt\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([\"jquery\"], function(jq) {\n      return (factory(jq));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"jquery\"));\n  } else if (jQuery && !jQuery.fn.colorpicker) {\n    factory(jQuery);\n  }\n}(this, function($) {\n  'use strict';\n  /**\n   * Color manipulation helper class\n   *\n   * @param {Object|String} [val]\n   * @param {Object} [predefinedColors]\n   * @param {String|null} [fallbackColor]\n   * @param {String|null} [fallbackFormat]\n   * @param {Boolean} [hexNumberSignPrefix]\n   * @constructor\n   */\n  var Color = function(\n    val, predefinedColors, fallbackColor, fallbackFormat, hexNumberSignPrefix) {\n    this.fallbackValue = fallbackColor ?\n      (\n        fallbackColor && (typeof fallbackColor.h !== 'undefined') ?\n        fallbackColor :\n        this.value = {\n          h: 0,\n          s: 0,\n          b: 0,\n          a: 1\n        }\n      ) :\n      null;\n\n    this.fallbackFormat = fallbackFormat ? fallbackFormat : 'rgba';\n\n    this.hexNumberSignPrefix = hexNumberSignPrefix === true;\n\n    this.value = this.fallbackValue;\n\n    this.origFormat = null; // original string format\n\n    this.predefinedColors = predefinedColors ? predefinedColors : {};\n\n    // We don't want to share aliases across instances so we extend new object\n    this.colors = $.extend({}, Color.webColors, this.predefinedColors);\n\n    if (val) {\n      if (typeof val.h !== 'undefined') {\n        this.value = val;\n      } else {\n        this.setColor(String(val));\n      }\n    }\n\n    if (!this.value) {\n      // Initial value is always black if no arguments are passed or val is empty\n      this.value = {\n        h: 0,\n        s: 0,\n        b: 0,\n        a: 1\n      };\n    }\n  };\n\n  Color.webColors = { // 140 predefined colors from the HTML Colors spec\n    \"aliceblue\": \"f0f8ff\",\n    \"antiquewhite\": \"faebd7\",\n    \"aqua\": \"00ffff\",\n    \"aquamarine\": \"7fffd4\",\n    \"azure\": \"f0ffff\",\n    \"beige\": \"f5f5dc\",\n    \"bisque\": \"ffe4c4\",\n    \"black\": \"000000\",\n    \"blanchedalmond\": \"ffebcd\",\n    \"blue\": \"0000ff\",\n    \"blueviolet\": \"8a2be2\",\n    \"brown\": \"a52a2a\",\n    \"burlywood\": \"deb887\",\n    \"cadetblue\": \"5f9ea0\",\n    \"chartreuse\": \"7fff00\",\n    \"chocolate\": \"d2691e\",\n    \"coral\": \"ff7f50\",\n    \"cornflowerblue\": \"6495ed\",\n    \"cornsilk\": \"fff8dc\",\n    \"crimson\": \"dc143c\",\n    \"cyan\": \"00ffff\",\n    \"darkblue\": \"00008b\",\n    \"darkcyan\": \"008b8b\",\n    \"darkgoldenrod\": \"b8860b\",\n    \"darkgray\": \"a9a9a9\",\n    \"darkgreen\": \"006400\",\n    \"darkkhaki\": \"bdb76b\",\n    \"darkmagenta\": \"8b008b\",\n    \"darkolivegreen\": \"556b2f\",\n    \"darkorange\": \"ff8c00\",\n    \"darkorchid\": \"9932cc\",\n    \"darkred\": \"8b0000\",\n    \"darksalmon\": \"e9967a\",\n    \"darkseagreen\": \"8fbc8f\",\n    \"darkslateblue\": \"483d8b\",\n    \"darkslategray\": \"2f4f4f\",\n    \"darkturquoise\": \"00ced1\",\n    \"darkviolet\": \"9400d3\",\n    \"deeppink\": \"ff1493\",\n    \"deepskyblue\": \"00bfff\",\n    \"dimgray\": \"696969\",\n    \"dodgerblue\": \"1e90ff\",\n    \"firebrick\": \"b22222\",\n    \"floralwhite\": \"fffaf0\",\n    \"forestgreen\": \"228b22\",\n    \"fuchsia\": \"ff00ff\",\n    \"gainsboro\": \"dcdcdc\",\n    \"ghostwhite\": \"f8f8ff\",\n    \"gold\": \"ffd700\",\n    \"goldenrod\": \"daa520\",\n    \"gray\": \"808080\",\n    \"green\": \"008000\",\n    \"greenyellow\": \"adff2f\",\n    \"honeydew\": \"f0fff0\",\n    \"hotpink\": \"ff69b4\",\n    \"indianred\": \"cd5c5c\",\n    \"indigo\": \"4b0082\",\n    \"ivory\": \"fffff0\",\n    \"khaki\": \"f0e68c\",\n    \"lavender\": \"e6e6fa\",\n    \"lavenderblush\": \"fff0f5\",\n    \"lawngreen\": \"7cfc00\",\n    \"lemonchiffon\": \"fffacd\",\n    \"lightblue\": \"add8e6\",\n    \"lightcoral\": \"f08080\",\n    \"lightcyan\": \"e0ffff\",\n    \"lightgoldenrodyellow\": \"fafad2\",\n    \"lightgrey\": \"d3d3d3\",\n    \"lightgreen\": \"90ee90\",\n    \"lightpink\": \"ffb6c1\",\n    \"lightsalmon\": \"ffa07a\",\n    \"lightseagreen\": \"20b2aa\",\n    \"lightskyblue\": \"87cefa\",\n    \"lightslategray\": \"778899\",\n    \"lightsteelblue\": \"b0c4de\",\n    \"lightyellow\": \"ffffe0\",\n    \"lime\": \"00ff00\",\n    \"limegreen\": \"32cd32\",\n    \"linen\": \"faf0e6\",\n    \"magenta\": \"ff00ff\",\n    \"maroon\": \"800000\",\n    \"mediumaquamarine\": \"66cdaa\",\n    \"mediumblue\": \"0000cd\",\n    \"mediumorchid\": \"ba55d3\",\n    \"mediumpurple\": \"9370d8\",\n    \"mediumseagreen\": \"3cb371\",\n    \"mediumslateblue\": \"7b68ee\",\n    \"mediumspringgreen\": \"00fa9a\",\n    \"mediumturquoise\": \"48d1cc\",\n    \"mediumvioletred\": \"c71585\",\n    \"midnightblue\": \"191970\",\n    \"mintcream\": \"f5fffa\",\n    \"mistyrose\": \"ffe4e1\",\n    \"moccasin\": \"ffe4b5\",\n    \"navajowhite\": \"ffdead\",\n    \"navy\": \"000080\",\n    \"oldlace\": \"fdf5e6\",\n    \"olive\": \"808000\",\n    \"olivedrab\": \"6b8e23\",\n    \"orange\": \"ffa500\",\n    \"orangered\": \"ff4500\",\n    \"orchid\": \"da70d6\",\n    \"palegoldenrod\": \"eee8aa\",\n    \"palegreen\": \"98fb98\",\n    \"paleturquoise\": \"afeeee\",\n    \"palevioletred\": \"d87093\",\n    \"papayawhip\": \"ffefd5\",\n    \"peachpuff\": \"ffdab9\",\n    \"peru\": \"cd853f\",\n    \"pink\": \"ffc0cb\",\n    \"plum\": \"dda0dd\",\n    \"powderblue\": \"b0e0e6\",\n    \"purple\": \"800080\",\n    \"red\": \"ff0000\",\n    \"rosybrown\": \"bc8f8f\",\n    \"royalblue\": \"4169e1\",\n    \"saddlebrown\": \"8b4513\",\n    \"salmon\": \"fa8072\",\n    \"sandybrown\": \"f4a460\",\n    \"seagreen\": \"2e8b57\",\n    \"seashell\": \"fff5ee\",\n    \"sienna\": \"a0522d\",\n    \"silver\": \"c0c0c0\",\n    \"skyblue\": \"87ceeb\",\n    \"slateblue\": \"6a5acd\",\n    \"slategray\": \"708090\",\n    \"snow\": \"fffafa\",\n    \"springgreen\": \"00ff7f\",\n    \"steelblue\": \"4682b4\",\n    \"tan\": \"d2b48c\",\n    \"teal\": \"008080\",\n    \"thistle\": \"d8bfd8\",\n    \"tomato\": \"ff6347\",\n    \"turquoise\": \"40e0d0\",\n    \"violet\": \"ee82ee\",\n    \"wheat\": \"f5deb3\",\n    \"white\": \"ffffff\",\n    \"whitesmoke\": \"f5f5f5\",\n    \"yellow\": \"ffff00\",\n    \"yellowgreen\": \"9acd32\",\n    \"transparent\": \"transparent\"\n  };\n\n  Color.prototype = {\n    constructor: Color,\n    colors: {}, // merged web and predefined colors\n    predefinedColors: {},\n    /**\n     * @return {Object}\n     */\n    getValue: function() {\n      return this.value;\n    },\n    /**\n     * @param {Object} val\n     */\n    setValue: function(val) {\n      this.value = val;\n    },\n    _sanitizeNumber: function(val) {\n      if (typeof val === 'number') {\n        return val;\n      }\n      if (isNaN(val) || (val === null) || (val === '') || (val === undefined)) {\n        return 1;\n      }\n      if (val === '') {\n        return 0;\n      }\n      if (typeof val.toLowerCase !== 'undefined') {\n        if (val.match(/^\\./)) {\n          val = \"0\" + val;\n        }\n        return Math.ceil(parseFloat(val) * 100) / 100;\n      }\n      return 1;\n    },\n    isTransparent: function(strVal) {\n      if (!strVal || !(typeof strVal === 'string' || strVal instanceof String)) {\n        return false;\n      }\n      strVal = strVal.toLowerCase().trim();\n      return (strVal === 'transparent') || (strVal.match(/#?00000000/)) || (strVal.match(/(rgba|hsla)\\(0,0,0,0?\\.?0\\)/));\n    },\n    rgbaIsTransparent: function(rgba) {\n      return ((rgba.r === 0) && (rgba.g === 0) && (rgba.b === 0) && (rgba.a === 0));\n    },\n    // parse a string to HSB\n    /**\n     * @protected\n     * @param {String} strVal\n     * @returns {boolean} Returns true if it could be parsed, false otherwise\n     */\n    setColor: function(strVal) {\n      strVal = strVal.toLowerCase().trim();\n      if (strVal) {\n        if (this.isTransparent(strVal)) {\n          this.value = {\n            h: 0,\n            s: 0,\n            b: 0,\n            a: 0\n          };\n          return true;\n        } else {\n          var parsedColor = this.parse(strVal);\n          if (parsedColor) {\n            this.value = this.value = {\n              h: parsedColor.h,\n              s: parsedColor.s,\n              b: parsedColor.b,\n              a: parsedColor.a\n            };\n            if (!this.origFormat) {\n              this.origFormat = parsedColor.format;\n            }\n          } else if (this.fallbackValue) {\n            // if parser fails, defaults to fallbackValue if defined, otherwise the value won't be changed\n            this.value = this.fallbackValue;\n          }\n        }\n      }\n      return false;\n    },\n    setHue: function(h) {\n      this.value.h = 1 - h;\n    },\n    setSaturation: function(s) {\n      this.value.s = s;\n    },\n    setBrightness: function(b) {\n      this.value.b = 1 - b;\n    },\n    setAlpha: function(a) {\n      this.value.a = Math.round((parseInt((1 - a) * 100, 10) / 100) * 100) / 100;\n    },\n    toRGB: function(h, s, b, a) {\n      if (arguments.length === 0) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      h *= 360;\n      var R, G, B, X, C;\n      h = (h % 360) / 60;\n      C = b * s;\n      X = C * (1 - Math.abs(h % 2 - 1));\n      R = G = B = b - C;\n\n      h = ~~h;\n      R += [C, X, 0, 0, X, C][h];\n      G += [X, C, C, X, 0, 0][h];\n      B += [0, 0, X, C, C, X][h];\n\n      return {\n        r: Math.round(R * 255),\n        g: Math.round(G * 255),\n        b: Math.round(B * 255),\n        a: a\n      };\n    },\n    toHex: function(ignoreFormat, h, s, b, a) {\n      if (arguments.length <= 1) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      var prefix = '#';\n      var rgb = this.toRGB(h, s, b, a);\n\n      if (this.rgbaIsTransparent(rgb)) {\n        return 'transparent';\n      }\n\n      if (!ignoreFormat) {\n        prefix = (this.hexNumberSignPrefix ? '#' : '');\n      }\n\n      var hexStr = prefix + (\n          (1 << 24) +\n          (parseInt(rgb.r) << 16) +\n          (parseInt(rgb.g) << 8) +\n          parseInt(rgb.b))\n        .toString(16)\n        .slice(1);\n\n      return hexStr;\n    },\n    toHSL: function(h, s, b, a) {\n      if (arguments.length === 0) {\n        h = this.value.h;\n        s = this.value.s;\n        b = this.value.b;\n        a = this.value.a;\n      }\n\n      var H = h,\n        L = (2 - s) * b,\n        S = s * b;\n      if (L > 0 && L <= 1) {\n        S /= L;\n      } else {\n        S /= 2 - L;\n      }\n      L /= 2;\n      if (S > 1) {\n        S = 1;\n      }\n      return {\n        h: isNaN(H) ? 0 : H,\n        s: isNaN(S) ? 0 : S,\n        l: isNaN(L) ? 0 : L,\n        a: isNaN(a) ? 0 : a\n      };\n    },\n    toAlias: function(r, g, b, a) {\n      var c, rgb = (arguments.length === 0) ? this.toHex(true) : this.toHex(true, r, g, b, a);\n\n      // support predef. colors in non-hex format too, as defined in the alias itself\n      var original = this.origFormat === 'alias' ? rgb : this.toString(false, this.origFormat);\n\n      for (var alias in this.colors) {\n        c = this.colors[alias].toLowerCase().trim();\n        if ((c === rgb) || (c === original)) {\n          return alias;\n        }\n      }\n      return false;\n    },\n    RGBtoHSB: function(r, g, b, a) {\n      r /= 255;\n      g /= 255;\n      b /= 255;\n\n      var H, S, V, C;\n      V = Math.max(r, g, b);\n      C = V - Math.min(r, g, b);\n      H = (C === 0 ? null :\n        V === r ? (g - b) / C :\n        V === g ? (b - r) / C + 2 :\n        (r - g) / C + 4\n      );\n      H = ((H + 360) % 6) * 60 / 360;\n      S = C === 0 ? 0 : C / V;\n      return {\n        h: this._sanitizeNumber(H),\n        s: S,\n        b: V,\n        a: this._sanitizeNumber(a)\n      };\n    },\n    HueToRGB: function(p, q, h) {\n      if (h < 0) {\n        h += 1;\n      } else if (h > 1) {\n        h -= 1;\n      }\n      if ((h * 6) < 1) {\n        return p + (q - p) * h * 6;\n      } else if ((h * 2) < 1) {\n        return q;\n      } else if ((h * 3) < 2) {\n        return p + (q - p) * ((2 / 3) - h) * 6;\n      } else {\n        return p;\n      }\n    },\n    HSLtoRGB: function(h, s, l, a) {\n      if (s < 0) {\n        s = 0;\n      }\n      var q;\n      if (l <= 0.5) {\n        q = l * (1 + s);\n      } else {\n        q = l + s - (l * s);\n      }\n\n      var p = 2 * l - q;\n\n      var tr = h + (1 / 3);\n      var tg = h;\n      var tb = h - (1 / 3);\n\n      var r = Math.round(this.HueToRGB(p, q, tr) * 255);\n      var g = Math.round(this.HueToRGB(p, q, tg) * 255);\n      var b = Math.round(this.HueToRGB(p, q, tb) * 255);\n      return [r, g, b, this._sanitizeNumber(a)];\n    },\n    /**\n     * @param {String} strVal\n     * @returns {Object} Object containing h,s,b,a,format properties or FALSE if failed to parse\n     */\n    parse: function(strVal) {\n      if (arguments.length === 0) {\n        return false;\n      }\n\n      var that = this,\n        result = false,\n        isAlias = (typeof this.colors[strVal] !== 'undefined'),\n        values, format;\n\n      if (isAlias) {\n        strVal = this.colors[strVal].toLowerCase().trim();\n      }\n\n      $.each(this.stringParsers, function(i, parser) {\n        var match = parser.re.exec(strVal);\n        values = match && parser.parse.apply(that, [match]);\n        if (values) {\n          result = {};\n          format = (isAlias ? 'alias' : (parser.format ? parser.format : that.getValidFallbackFormat()));\n          if (format.match(/hsla?/)) {\n            result = that.RGBtoHSB.apply(that, that.HSLtoRGB.apply(that, values));\n          } else {\n            result = that.RGBtoHSB.apply(that, values);\n          }\n          if (result instanceof Object) {\n            result.format = format;\n          }\n          return false; // stop iterating\n        }\n        return true;\n      });\n      return result;\n    },\n    getValidFallbackFormat: function() {\n      var formats = [\n        'rgba', 'rgb', 'hex', 'hsla', 'hsl'\n      ];\n      if (this.origFormat && (formats.indexOf(this.origFormat) !== -1)) {\n        return this.origFormat;\n      }\n      if (this.fallbackFormat && (formats.indexOf(this.fallbackFormat) !== -1)) {\n        return this.fallbackFormat;\n      }\n\n      return 'rgba'; // By default, return a format that will not lose the alpha info\n    },\n    /**\n     *\n     * @param {string} [format] (default: rgba)\n     * @param {boolean} [translateAlias] Return real color for pre-defined (non-standard) aliases (default: false)\n     * @param {boolean} [forceRawValue] Forces hashtag prefix when getting hex color (default: false)\n     * @returns {String}\n     */\n    toString: function(forceRawValue, format, translateAlias) {\n      format = format || this.origFormat || this.fallbackFormat;\n      translateAlias = translateAlias || false;\n\n      var c = false;\n\n      switch (format) {\n        case 'rgb':\n          {\n            c = this.toRGB();\n            if (this.rgbaIsTransparent(c)) {\n              return 'transparent';\n            }\n            return 'rgb(' + c.r + ',' + c.g + ',' + c.b + ')';\n          }\n          break;\n        case 'rgba':\n          {\n            c = this.toRGB();\n            return 'rgba(' + c.r + ',' + c.g + ',' + c.b + ',' + c.a + ')';\n          }\n          break;\n        case 'hsl':\n          {\n            c = this.toHSL();\n            return 'hsl(' + Math.round(c.h * 360) + ',' + Math.round(c.s * 100) + '%,' + Math.round(c.l * 100) + '%)';\n          }\n          break;\n        case 'hsla':\n          {\n            c = this.toHSL();\n            return 'hsla(' + Math.round(c.h * 360) + ',' + Math.round(c.s * 100) + '%,' + Math.round(c.l * 100) + '%,' + c.a + ')';\n          }\n          break;\n        case 'hex':\n          {\n            return this.toHex(forceRawValue);\n          }\n          break;\n        case 'alias':\n          {\n            c = this.toAlias();\n\n            if (c === false) {\n              return this.toString(forceRawValue, this.getValidFallbackFormat());\n            }\n\n            if (translateAlias && !(c in Color.webColors) && (c in this.predefinedColors)) {\n              return this.predefinedColors[c];\n            }\n\n            return c;\n          }\n        default:\n          {\n            return c;\n          }\n          break;\n      }\n    },\n    // a set of RE's that can match strings and generate color tuples.\n    // from John Resig color plugin\n    // https://github.com/jquery/jquery-color/\n    stringParsers: [{\n      re: /rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*?\\)/,\n      format: 'rgb',\n      parse: function(execResult) {\n        return [\n          execResult[1],\n          execResult[2],\n          execResult[3],\n          1\n        ];\n      }\n    }, {\n      re: /rgb\\(\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*?\\)/,\n      format: 'rgb',\n      parse: function(execResult) {\n        return [\n          2.55 * execResult[1],\n          2.55 * execResult[2],\n          2.55 * execResult[3],\n          1\n        ];\n      }\n    }, {\n      re: /rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'rgba',\n      parse: function(execResult) {\n        return [\n          execResult[1],\n          execResult[2],\n          execResult[3],\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /rgba\\(\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'rgba',\n      parse: function(execResult) {\n        return [\n          2.55 * execResult[1],\n          2.55 * execResult[2],\n          2.55 * execResult[3],\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /hsl\\(\\s*(\\d*(?:\\.\\d+)?)\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*?\\)/,\n      format: 'hsl',\n      parse: function(execResult) {\n        return [\n          execResult[1] / 360,\n          execResult[2] / 100,\n          execResult[3] / 100,\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /hsla\\(\\s*(\\d*(?:\\.\\d+)?)\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*,\\s*(\\d*(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d*(?:\\.\\d+)?)\\s*)?\\)/,\n      format: 'hsla',\n      parse: function(execResult) {\n        return [\n          execResult[1] / 360,\n          execResult[2] / 100,\n          execResult[3] / 100,\n          execResult[4]\n        ];\n      }\n    }, {\n      re: /#?([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,\n      format: 'hex',\n      parse: function(execResult) {\n        return [\n          parseInt(execResult[1], 16),\n          parseInt(execResult[2], 16),\n          parseInt(execResult[3], 16),\n          1\n        ];\n      }\n    }, {\n      re: /#?([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,\n      format: 'hex',\n      parse: function(execResult) {\n        return [\n          parseInt(execResult[1] + execResult[1], 16),\n          parseInt(execResult[2] + execResult[2], 16),\n          parseInt(execResult[3] + execResult[3], 16),\n          1\n        ];\n      }\n    }],\n    colorNameToHex: function(name) {\n      if (typeof this.colors[name.toLowerCase()] !== 'undefined') {\n        return this.colors[name.toLowerCase()];\n      }\n      return false;\n    }\n  };\n\n  /*\n   * Default plugin options\n   */\n  var defaults = {\n    horizontal: false, // horizontal mode layout ?\n    inline: false, //forces to show the colorpicker as an inline element\n    color: false, //forces a color\n    format: false, //forces a format\n    input: 'input', // children input selector\n    container: false, // container selector\n    component: '.add-on, .input-group-addon', // children component selector\n    fallbackColor: false, // fallback color value. null = keeps current color.\n    fallbackFormat: 'hex', // fallback color format\n    hexNumberSignPrefix: true, // put a '#' (number sign) before hex strings\n    sliders: {\n      saturation: {\n        maxLeft: 100,\n        maxTop: 100,\n        callLeft: 'setSaturation',\n        callTop: 'setBrightness'\n      },\n      hue: {\n        maxLeft: 0,\n        maxTop: 100,\n        callLeft: false,\n        callTop: 'setHue'\n      },\n      alpha: {\n        maxLeft: 0,\n        maxTop: 100,\n        callLeft: false,\n        callTop: 'setAlpha'\n      }\n    },\n    slidersHorz: {\n      saturation: {\n        maxLeft: 100,\n        maxTop: 100,\n        callLeft: 'setSaturation',\n        callTop: 'setBrightness'\n      },\n      hue: {\n        maxLeft: 100,\n        maxTop: 0,\n        callLeft: 'setHue',\n        callTop: false\n      },\n      alpha: {\n        maxLeft: 100,\n        maxTop: 0,\n        callLeft: 'setAlpha',\n        callTop: false\n      }\n    },\n    template: '<div class=\"colorpicker dropdown-menu\">' +\n      '<div class=\"colorpicker-saturation\"><i><b></b></i></div>' +\n      '<div class=\"colorpicker-hue\"><i></i></div>' +\n      '<div class=\"colorpicker-alpha\"><i></i></div>' +\n      '<div class=\"colorpicker-color\"><div /></div>' +\n      '<div class=\"colorpicker-selectors\"></div>' +\n      '</div>',\n    align: 'right',\n    customClass: null, // custom class added to the colorpicker element\n    colorSelectors: null // custom color aliases\n  };\n\n  /**\n   * Colorpicker component class\n   *\n   * @param {Object|String} element\n   * @param {Object} options\n   * @constructor\n   */\n  var Colorpicker = function(element, options) {\n    this.element = $(element).addClass('colorpicker-element');\n    this.options = $.extend(true, {}, defaults, this.element.data(), options);\n    this.component = this.options.component;\n    this.component = (this.component !== false) ? this.element.find(this.component) : false;\n    if (this.component && (this.component.length === 0)) {\n      this.component = false;\n    }\n    this.container = (this.options.container === true) ? this.element : this.options.container;\n    this.container = (this.container !== false) ? $(this.container) : false;\n\n    // Is the element an input? Should we search inside for any input?\n    this.input = this.element.is('input') ? this.element : (this.options.input ?\n      this.element.find(this.options.input) : false);\n    if (this.input && (this.input.length === 0)) {\n      this.input = false;\n    }\n    // Set HSB color\n    this.color = this.createColor(this.options.color !== false ? this.options.color : this.getValue());\n\n    this.format = this.options.format !== false ? this.options.format : this.color.origFormat;\n\n    if (this.options.color !== false) {\n      this.updateInput(this.color);\n      this.updateData(this.color);\n    }\n\n    this.disabled = false;\n\n    // Setup picker\n    var $picker = this.picker = $(this.options.template);\n    if (this.options.customClass) {\n      $picker.addClass(this.options.customClass);\n    }\n    if (this.options.inline) {\n      $picker.addClass('colorpicker-inline colorpicker-visible');\n    } else {\n      $picker.addClass('colorpicker-hidden');\n    }\n    if (this.options.horizontal) {\n      $picker.addClass('colorpicker-horizontal');\n    }\n    if (\n      (['rgba', 'hsla', 'alias'].indexOf(this.format) !== -1) ||\n      this.options.format === false ||\n      this.getValue() === 'transparent'\n    ) {\n      $picker.addClass('colorpicker-with-alpha');\n    }\n    if (this.options.align === 'right') {\n      $picker.addClass('colorpicker-right');\n    }\n    if (this.options.inline === true) {\n      $picker.addClass('colorpicker-no-arrow');\n    }\n    if (this.options.colorSelectors) {\n      var colorpicker = this,\n        selectorsContainer = colorpicker.picker.find('.colorpicker-selectors');\n\n      if (selectorsContainer.length > 0) {\n        $.each(this.options.colorSelectors, function(name, color) {\n          var $btn = $('<i />')\n            .addClass('colorpicker-selectors-color')\n            .css('background-color', color)\n            .data('class', name).data('alias', name);\n\n          $btn.on('mousedown.colorpicker touchstart.colorpicker', function(event) {\n            event.preventDefault();\n            colorpicker.setValue(\n              colorpicker.format === 'alias' ? $(this).data('alias') : $(this).css('background-color')\n            );\n          });\n          selectorsContainer.append($btn);\n        });\n        selectorsContainer.show().addClass('colorpicker-visible');\n      }\n    }\n\n    // Prevent closing the colorpicker when clicking on itself\n    $picker.on('mousedown.colorpicker touchstart.colorpicker', $.proxy(function(e) {\n      if (e.target === e.currentTarget) {\n        e.preventDefault();\n      }\n    }, this));\n\n    // Bind click/tap events on the sliders\n    $picker.find('.colorpicker-saturation, .colorpicker-hue, .colorpicker-alpha')\n      .on('mousedown.colorpicker touchstart.colorpicker', $.proxy(this.mousedown, this));\n\n    $picker.appendTo(this.container ? this.container : $('body'));\n\n    // Bind other events\n    if (this.input !== false) {\n      this.input.on({\n        'keyup.colorpicker': $.proxy(this.keyup, this)\n      });\n      this.input.on({\n        'change.colorpicker': $.proxy(this.change, this)\n      });\n      if (this.component === false) {\n        this.element.on({\n          'focus.colorpicker': $.proxy(this.show, this)\n        });\n      }\n      if (this.options.inline === false) {\n        this.element.on({\n          'focusout.colorpicker': $.proxy(this.hide, this)\n        });\n      }\n    }\n\n    if (this.component !== false) {\n      this.component.on({\n        'click.colorpicker': $.proxy(this.show, this)\n      });\n    }\n\n    if ((this.input === false) && (this.component === false)) {\n      this.element.on({\n        'click.colorpicker': $.proxy(this.show, this)\n      });\n    }\n\n    // for HTML5 input[type='color']\n    if ((this.input !== false) && (this.component !== false) && (this.input.attr('type') === 'color')) {\n\n      this.input.on({\n        'click.colorpicker': $.proxy(this.show, this),\n        'focus.colorpicker': $.proxy(this.show, this)\n      });\n    }\n    this.update();\n\n    $($.proxy(function() {\n      this.element.trigger('create');\n    }, this));\n  };\n\n  Colorpicker.Color = Color;\n\n  Colorpicker.prototype = {\n    constructor: Colorpicker,\n    destroy: function() {\n      this.picker.remove();\n      this.element.removeData('colorpicker', 'color').off('.colorpicker');\n      if (this.input !== false) {\n        this.input.off('.colorpicker');\n      }\n      if (this.component !== false) {\n        this.component.off('.colorpicker');\n      }\n      this.element.removeClass('colorpicker-element');\n      this.element.trigger({\n        type: 'destroy'\n      });\n    },\n    reposition: function() {\n      if (this.options.inline !== false || this.options.container) {\n        return false;\n      }\n      var type = this.container && this.container[0] !== window.document.body ? 'position' : 'offset';\n      var element = this.component || this.element;\n      var offset = element[type]();\n      if (this.options.align === 'right') {\n        offset.left -= this.picker.outerWidth() - element.outerWidth();\n      }\n      this.picker.css({\n        top: offset.top + element.outerHeight(),\n        left: offset.left\n      });\n    },\n    show: function(e) {\n      if (this.isDisabled()) {\n        // Don't show the widget if it's disabled (the input)\n        return;\n      }\n      this.picker.addClass('colorpicker-visible').removeClass('colorpicker-hidden');\n      this.reposition();\n      $(window).on('resize.colorpicker', $.proxy(this.reposition, this));\n      if (e && (!this.hasInput() || this.input.attr('type') === 'color')) {\n        if (e.stopPropagation && e.preventDefault) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }\n      if ((this.component || !this.input) && (this.options.inline === false)) {\n        $(window.document).on({\n          'mousedown.colorpicker': $.proxy(this.hide, this)\n        });\n      }\n      this.element.trigger({\n        type: 'showPicker',\n        color: this.color\n      });\n    },\n    hide: function(e) {\n      if ((typeof e !== 'undefined') && e.target) {\n        // Prevent hide if triggered by an event and an element inside the colorpicker has been clicked/touched\n        if (\n          $(e.currentTarget).parents('.colorpicker').length > 0 ||\n          $(e.target).parents('.colorpicker').length > 0\n        ) {\n          return false;\n        }\n      }\n      this.picker.addClass('colorpicker-hidden').removeClass('colorpicker-visible');\n      $(window).off('resize.colorpicker', this.reposition);\n      $(window.document).off({\n        'mousedown.colorpicker': this.hide\n      });\n      this.update();\n      this.element.trigger({\n        type: 'hidePicker',\n        color: this.color\n      });\n    },\n    updateData: function(val) {\n      val = val || this.color.toString(false, this.format);\n      this.element.data('color', val);\n      return val;\n    },\n    updateInput: function(val) {\n      val = val || this.color.toString(false, this.format);\n      if (this.input !== false) {\n        this.input.prop('value', val);\n        this.input.trigger('change');\n      }\n      return val;\n    },\n    updatePicker: function(val) {\n      if (typeof val !== 'undefined') {\n        this.color = this.createColor(val);\n      }\n      var sl = (this.options.horizontal === false) ? this.options.sliders : this.options.slidersHorz;\n      var icns = this.picker.find('i');\n      if (icns.length === 0) {\n        return;\n      }\n      if (this.options.horizontal === false) {\n        sl = this.options.sliders;\n        icns.eq(1).css('top', sl.hue.maxTop * (1 - this.color.value.h)).end()\n          .eq(2).css('top', sl.alpha.maxTop * (1 - this.color.value.a));\n      } else {\n        sl = this.options.slidersHorz;\n        icns.eq(1).css('left', sl.hue.maxLeft * (1 - this.color.value.h)).end()\n          .eq(2).css('left', sl.alpha.maxLeft * (1 - this.color.value.a));\n      }\n      icns.eq(0).css({\n        'top': sl.saturation.maxTop - this.color.value.b * sl.saturation.maxTop,\n        'left': this.color.value.s * sl.saturation.maxLeft\n      });\n\n      this.picker.find('.colorpicker-saturation')\n        .css('backgroundColor', this.color.toHex(true, this.color.value.h, 1, 1, 1));\n\n      this.picker.find('.colorpicker-alpha')\n        .css('backgroundColor', this.color.toHex(true));\n\n      this.picker.find('.colorpicker-color, .colorpicker-color div')\n        .css('backgroundColor', this.color.toString(true, this.format));\n\n      return val;\n    },\n    updateComponent: function(val) {\n      var color;\n\n      if (typeof val !== 'undefined') {\n        color = this.createColor(val);\n      } else {\n        color = this.color;\n      }\n\n      if (this.component !== false) {\n        var icn = this.component.find('i').eq(0);\n        if (icn.length > 0) {\n          icn.css({\n            'backgroundColor': color.toString(true, this.format)\n          });\n        } else {\n          this.component.css({\n            'backgroundColor': color.toString(true, this.format)\n          });\n        }\n      }\n\n      return color.toString(false, this.format);\n    },\n    update: function(force) {\n      var val;\n      if ((this.getValue(false) !== false) || (force === true)) {\n        // Update input/data only if the current value is not empty\n        val = this.updateComponent();\n        this.updateInput(val);\n        this.updateData(val);\n        this.updatePicker(); // only update picker if value is not empty\n      }\n      return val;\n\n    },\n    setValue: function(val) { // set color manually\n      this.color = this.createColor(val);\n      this.update(true);\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color,\n        value: val\n      });\n    },\n    /**\n     * Creates a new color using the instance options\n     * @protected\n     * @param {String} val\n     * @returns {Color}\n     */\n    createColor: function(val) {\n      return new Color(\n        val ? val : null,\n        this.options.colorSelectors,\n        this.options.fallbackColor ? this.options.fallbackColor : this.color,\n        this.options.fallbackFormat,\n        this.options.hexNumberSignPrefix\n      );\n    },\n    getValue: function(defaultValue) {\n      defaultValue = (typeof defaultValue === 'undefined') ? this.options.fallbackColor : defaultValue;\n      var val;\n      if (this.hasInput()) {\n        val = this.input.val();\n      } else {\n        val = this.element.data('color');\n      }\n      if ((val === undefined) || (val === '') || (val === null)) {\n        // if not defined or empty, return default\n        val = defaultValue;\n      }\n      return val;\n    },\n    hasInput: function() {\n      return (this.input !== false);\n    },\n    isDisabled: function() {\n      return this.disabled;\n    },\n    disable: function() {\n      if (this.hasInput()) {\n        this.input.prop('disabled', true);\n      }\n      this.disabled = true;\n      this.element.trigger({\n        type: 'disable',\n        color: this.color,\n        value: this.getValue()\n      });\n      return true;\n    },\n    enable: function() {\n      if (this.hasInput()) {\n        this.input.prop('disabled', false);\n      }\n      this.disabled = false;\n      this.element.trigger({\n        type: 'enable',\n        color: this.color,\n        value: this.getValue()\n      });\n      return true;\n    },\n    currentSlider: null,\n    mousePointer: {\n      left: 0,\n      top: 0\n    },\n    mousedown: function(e) {\n      if (!e.pageX && !e.pageY && e.originalEvent && e.originalEvent.touches) {\n        e.pageX = e.originalEvent.touches[0].pageX;\n        e.pageY = e.originalEvent.touches[0].pageY;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n\n      var target = $(e.target);\n\n      //detect the slider and set the limits and callbacks\n      var zone = target.closest('div');\n      var sl = this.options.horizontal ? this.options.slidersHorz : this.options.sliders;\n      if (!zone.is('.colorpicker')) {\n        if (zone.is('.colorpicker-saturation')) {\n          this.currentSlider = $.extend({}, sl.saturation);\n        } else if (zone.is('.colorpicker-hue')) {\n          this.currentSlider = $.extend({}, sl.hue);\n        } else if (zone.is('.colorpicker-alpha')) {\n          this.currentSlider = $.extend({}, sl.alpha);\n        } else {\n          return false;\n        }\n        var offset = zone.offset();\n        //reference to guide's style\n        this.currentSlider.guide = zone.find('i')[0].style;\n        this.currentSlider.left = e.pageX - offset.left;\n        this.currentSlider.top = e.pageY - offset.top;\n        this.mousePointer = {\n          left: e.pageX,\n          top: e.pageY\n        };\n        //trigger mousemove to move the guide to the current position\n        $(window.document).on({\n          'mousemove.colorpicker': $.proxy(this.mousemove, this),\n          'touchmove.colorpicker': $.proxy(this.mousemove, this),\n          'mouseup.colorpicker': $.proxy(this.mouseup, this),\n          'touchend.colorpicker': $.proxy(this.mouseup, this)\n        }).trigger('mousemove');\n      }\n      return false;\n    },\n    mousemove: function(e) {\n      if (!e.pageX && !e.pageY && e.originalEvent && e.originalEvent.touches) {\n        e.pageX = e.originalEvent.touches[0].pageX;\n        e.pageY = e.originalEvent.touches[0].pageY;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      var left = Math.max(\n        0,\n        Math.min(\n          this.currentSlider.maxLeft,\n          this.currentSlider.left + ((e.pageX || this.mousePointer.left) - this.mousePointer.left)\n        )\n      );\n      var top = Math.max(\n        0,\n        Math.min(\n          this.currentSlider.maxTop,\n          this.currentSlider.top + ((e.pageY || this.mousePointer.top) - this.mousePointer.top)\n        )\n      );\n      this.currentSlider.guide.left = left + 'px';\n      this.currentSlider.guide.top = top + 'px';\n      if (this.currentSlider.callLeft) {\n        this.color[this.currentSlider.callLeft].call(this.color, left / this.currentSlider.maxLeft);\n      }\n      if (this.currentSlider.callTop) {\n        this.color[this.currentSlider.callTop].call(this.color, top / this.currentSlider.maxTop);\n      }\n      // Change format dynamically\n      // Only occurs if user choose the dynamic format by\n      // setting option format to false\n      if (\n        this.options.format === false &&\n        (this.currentSlider.callTop === 'setAlpha' ||\n          this.currentSlider.callLeft === 'setAlpha')\n      ) {\n\n        // Converting from hex / rgb to rgba\n        if (this.color.value.a !== 1) {\n          this.format = 'rgba';\n          this.color.origFormat = 'rgba';\n        }\n\n        // Converting from rgba to hex\n        else {\n          this.format = 'hex';\n          this.color.origFormat = 'hex';\n        }\n      }\n      this.update(true);\n\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color\n      });\n      return false;\n    },\n    mouseup: function(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      $(window.document).off({\n        'mousemove.colorpicker': this.mousemove,\n        'touchmove.colorpicker': this.mousemove,\n        'mouseup.colorpicker': this.mouseup,\n        'touchend.colorpicker': this.mouseup\n      });\n      return false;\n    },\n    change: function(e) {\n      this.keyup(e);\n    },\n    keyup: function(e) {\n      if ((e.keyCode === 38)) {\n        if (this.color.value.a < 1) {\n          this.color.value.a = Math.round((this.color.value.a + 0.01) * 100) / 100;\n        }\n        this.update(true);\n      } else if ((e.keyCode === 40)) {\n        if (this.color.value.a > 0) {\n          this.color.value.a = Math.round((this.color.value.a - 0.01) * 100) / 100;\n        }\n        this.update(true);\n      } else {\n        this.color = this.createColor(this.input.val());\n        // Change format dynamically\n        // Only occurs if user choose the dynamic format by\n        // setting option format to false\n        if (this.color.origFormat && this.options.format === false) {\n          this.format = this.color.origFormat;\n        }\n        if (this.getValue(false) !== false) {\n          this.updateData();\n          this.updateComponent();\n          this.updatePicker();\n        }\n      }\n      this.element.trigger({\n        type: 'changeColor',\n        color: this.color,\n        value: this.input.val()\n      });\n    }\n  };\n\n  $.colorpicker = Colorpicker;\n\n  $.fn.colorpicker = function(option) {\n    var apiArgs = Array.prototype.slice.call(arguments, 1),\n      isSingleElement = (this.length === 1),\n      returnValue = null;\n\n    var $jq = this.each(function() {\n      var $this = $(this),\n        inst = $this.data('colorpicker'),\n        options = ((typeof option === 'object') ? option : {});\n\n      if (!inst) {\n        inst = new Colorpicker(this, options);\n        $this.data('colorpicker', inst);\n      }\n\n      if (typeof option === 'string') {\n        if ($.isFunction(inst[option])) {\n          returnValue = inst[option].apply(inst, apiArgs);\n        } else { // its a property ?\n          if (apiArgs.length) {\n            // set property\n            inst[option] = apiArgs[0];\n          }\n          returnValue = inst[option];\n        }\n      } else {\n        returnValue = $this;\n      }\n    });\n    return isSingleElement ? returnValue : $jq;\n  };\n\n  $.fn.colorpicker.constructor = Colorpicker;\n\n}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar constants_1 = require(\"../constants\");\nfunction getEmailInterval(enableEmailNotification, enableEmailBatching, emailIntervalPreference) {\n    var INTERVAL_NEVER = constants_1.Preferences.INTERVAL_NEVER, INTERVAL_IMMEDIATE = constants_1.Preferences.INTERVAL_IMMEDIATE, INTERVAL_FIFTEEN_MINUTES = constants_1.Preferences.INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR = constants_1.Preferences.INTERVAL_HOUR;\n    var validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    var validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    }\n    else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    }\n    else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n    else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n    return emailIntervalPreference;\n}\nexports.getEmailInterval = getEmailInterval;\n//# sourceMappingURL=notify_props.js.map","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\nconst hexRegex = /^#([\\da-f]{3}|[\\da-f]{6})$/i;\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n    hex: string;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n        this.state = {\n            isOpened: false,\n            hex: this.props.color.toUpperCase(),\n        };\n    }\n\n    public componentWillMount() {\n        this.setHex();\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (this.props.color !== prevProps.color && this.ensureLongColourValue(this.state.hex) !== this.props.color) {\n            this.setHex();\n        }\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private setHex() {\n        this.setState({hex: this.props.color.toUpperCase()});\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    private ensureLongColourValue = (value: string) => {\n        if (value.length !== 4) {\n            return value;\n        }\n        return value.split('').map((ch, index) => {\n            if (index === 0) {\n                return ch;\n            }\n            return `${ch}${ch}`;\n        }).join('');\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let {value} = event.target;\n        if (!value.startsWith('#')) {\n            value = '#' + value;\n        }\n        if (!hexRegex.test(value)) {\n            return;\n        }\n        this.setState({hex: value});\n        const {onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(this.ensureLongColourValue(value));\n        }\n    };\n\n    private onBlur = () => {\n        const {hex} = this.state;\n        if (hex.length === 4) {\n            const value = this.ensureLongColourValue(hex);\n            const {onChange: handleChange} = this.props;\n            if (handleChange && value.length === 7) {\n                handleChange(value);\n                this.setState({hex: value.toUpperCase()});\n            }\n        } else {\n            this.setHex();\n        }\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    private selectValue = (event: React.FocusEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened, hex} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={hex}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onKeyDown={this.onKeyDown}\n                    onFocus={this.selectValue}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon color-pad'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = $('.copy-theme-success');\n        copySuccess.show();\n\n        setTimeout(() => {\n            copySuccess.hide();\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe pt-2'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='pt-2'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        lockTeammateNameDisplay: PropTypes.bool,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\n                    src={Utils.imageURLForUser(user.id, user.last_picture_update)}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: {\n        props: {\n            os: string;\n            platform: string;\n            browser: string;\n        };\n        create_at: number;\n        last_activity_at: number;\n        id: string;\n    };\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }),\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * Display the setting to toggle the new sidebar\n         */\n        showChannelSidebarOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * The preferences to show the channel sidebar organization setting\n         */\n        channelSidebarOrganizationOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            channelSidebarOrganizationOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                channel_sidebar_organization: channelSidebarOrganizationOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n            this.trackSettingChangeIfNecessary('newSidebar');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization, channelSidebarOrganizationOption} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return channelSidebarOrganizationOption === 'true' ? 'channelSidebarOrganization' : 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSidebarOrganization':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(this.getStateFromProps());\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelSidebarOrganizationSection = () => {\n        const helpChannelSidebarOrganizationText = (\n            <FormattedMarkdownMessage\n                id={t('user.settings.sidebar.channelSidebarOrganizationSection.desc')}\n                defaultMessage={'When enabled, access experimental channel sidebar features, including collapsible sections and unreads filtering. [Learn more](!https://about.mattermost.com/default-sidebar/) or [give us feedback](!https://about.mattermost.com/default-sidebar-survey/)'}\n            />\n        );\n\n        let contents = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                        defaultMessage='Experimental Sidebar Features'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSidebarOrganizationOption)}\n                section={'channelSidebarOrganization'}\n                updateSection={this.updateSection}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSidebarOrganization') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                            defaultMessage='Experimental Sidebar Features'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSidebarOrganizationSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                                    defaultMessage='Experimental Sidebar Features'\n                                />\n                            </legend>\n                            <div\n                                id='channelSidebarOrganizationRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionEnabled'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_sidebar_organization', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSidebarOrganizationRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionOff'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_sidebar_organization', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSidebarOrganizationelpText'>\n                                <br/>\n                                {helpChannelSidebarOrganizationText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_sidebar_organization'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    }\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization, showChannelSidebarOrganization, channelSidebarOrganizationOption} = this.props;\n\n        const channelSidebarOrganizationDisabled = channelSidebarOrganizationOption === 'false';\n\n        const channelOrganizationSection = (showChannelOrganization && channelSidebarOrganizationDisabled) ? this.renderChannelOrganizationSection() : null;\n        const channelSidebarOrganizationSection = showChannelSidebarOrganization ? this.renderChannelSidebarOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = channelSidebarOrganizationDisabled ? this.renderChannelSwitcherSection() : null;\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelSidebarOrganizationSection}\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences, getNewSidebarPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const channelSidebarOrganizationOption = getNewSidebarPreference(state);\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        channelSidebarOrganizationOption: String(channelSidebarOrganizationOption),\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showChannelSidebarOrganization: config.ExperimentalChannelSidebarOrganization !== 'disabled',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\ntype Props = {\n    user: {};\n    activeTab?: string;\n    activeSection?: string;\n    updateSection?: () => void;\n    updateTab?: () => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n}\n\nexport default class UserSettings extends React.PureComponent<Props, {}> {\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}