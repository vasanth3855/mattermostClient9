{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/login/login_mfa.jsx","webpack:///./actions/views/login.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","style","marginLeft","color","fontWeight","width","LoginMfa","constructor","super","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","password","saving","serverError","errorClass","onSubmit","handleSubmit","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","disabled","localizeMessage","savingMessage","PropTypes","string","isRequired","func","login","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","LoginController","Component","sessionExpired","document","intl","formatMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","onDismissSessionExpired","location","newQuery","search","browserHistory","pathname","hash","loginIdInput","current","passwordInput","toLowerCase","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","values","ldapUsername","ldapLoginFieldName","loading","actions","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","redirectTo","LocalStorageStore","setWasLoggedIn","match","GlobalActions","brandImageError","enableCustomBrand","text","customBrandText","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","alt","src","onError","handleBrandImageError","options","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableLdap","enableSaml","extraParam","Constants","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","key","preSubmit","margin","ref","handleLoginIdChange","createLoginPlaceholder","autoCapitalize","handlePasswordChange","enableOpenServer","checkSignUpEnabled","href","getOAuthRoute","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","createRef","componentDidMount","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","initializing","content","customContent","customClass","backButton","hideMfa","createLoginOptions","createCustomLogin","logoImage","intlShape","object","bool","shape","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators"],"mappings":"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","file":"8.e2d18e72f635d2c3f3a2.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/87b80d01a017833f1357800bfca49cea.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost'\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name' style={{marginLeft: '104%'}}>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                    style={{color: '#223162', fontWeight: 400, width: 'max-content'}}\n\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Markdown from 'components/markdown';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        <Markdown\n                            message={text}\n                            options={\n                                {mentions: false,\n                                    imagesMetadata: null}\n                            }\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n"],"sourceRoot":""}